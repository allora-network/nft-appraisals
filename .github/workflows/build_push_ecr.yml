# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS which will be run by Fargate when a release is created
name: Build and Push docker image to ECR

on:
  push:
    tags:
      - 'v*'
      - dev-latest

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-push:
    name: Build and Push docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{github.event.repository.name}}       # Naming convention: ECR registry name == GITHUB repo name
        run: |
          #! Due to we trigger on push.tags GITHUB_REF - is the tag name
          GIT_TAG="$(echo $GITHUB_REF| sed 's#refs/tags/##')"

          IMAGE_TAG="${GITHUB_SHA:0:8}"
          EXTRA_IMAGE_TAGS=$GIT_TAG

          #! Add latest tag only if on named releases tag='v*'
          if [[ ${GIT_TAG} == v* ]]; then
            EXTRA_IMAGE_TAGS="${EXTRA_IMAGE_TAGS};latest"
          fi

          appsToBuild=("node")

          for app in "${appsToBuild[@]}"; do

            echo "Building docker image from $app folder"

            APP_ECR_REPOSITORY="${ECR_REPOSITORY}"
            if [ "$app" != "." ]; then
              APP_ECR_REPOSITORY="${ECR_REPOSITORY}-${app}"
            fi

            if [ -f $app/Dockerfile ]; then
              docker build --pull -t $ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG $app
            else
              echo 'No Dockerfile in $app folder, skipping.'
              continue
            fi

            docker push $ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG

            # Build and PUSH additional tags
            for tag in $(echo $EXTRA_IMAGE_TAGS| tr ";" "\n"); do
              docker tag $ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$APP_ECR_REPOSITORY:$tag
              docker push $ECR_REGISTRY/$APP_ECR_REPOSITORY:$tag
            done
          done
